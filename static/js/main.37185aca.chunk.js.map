{"version":3,"sources":["components/header.js","components/form.js","components/footer.js","components/results.js","components/history.js","App.js","serviceWorker.js","index.js","img/three-blue-dots.gif"],"names":["className","Form","props","setMethod","e","setState","method","target","value","setUrl","url","setData","data","sendInput","handleInput","state","render","data-testid","placeholder","defaultValue","defaultUrl","onChange","type","name","defaultChecked","htmlFor","checked","onClick","defaultData","defaultMethod","React","Component","customTheme","theme","overflow","Results","resultsIn","id","json","headers","padding","loading","src","loadingImage","alt","pastSearches","Object","keys","map","hash","key","request","talkToApi","App","requestObj","a","toggleLoading","axios","results","getResults","saveToLocalStorage","console","log","requestData","md5","JSON","stringify","stringifiedObj","localStorage","setItem","parse","getItem","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.37185aca.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () => {\n  return (\n    <header className=\"App-header\">\n      <h1>RESTy</h1>\n    </header>\n  );\n}\n","import React from 'react';\n\n\nclass Form extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      method: this.props.defaultMethod,\n      url: this.props.defaultUrl,\n      data:this.props.defaultData,\n    }\n\n  }\n\n  setMethod = e => this.setState({ method: e.target.value });\n  setUrl = e => this.setState({ url: e.target.value });\n  setData = e => this.setState({ data: e.target.value});\n\n  sendInput = () => this.props.handleInput(this.state);\n\n  render = () => (\n    <>\n      <section className=\"form\">\n\n        <fieldset>\n          <legend>URL</legend>\n          <input data-testid=\"urlInput\" placeholder=\"http://\" defaultValue={this.props.defaultUrl} onChange={this.setUrl} />\n        </fieldset>\n\n        <fieldset>\n          <legend>Method</legend>\n          <div>\n            <input type=\"radio\" value=\"GET\" name=\"method\" onChange={this.setMethod}\n              defaultChecked={ this.state.method === \"GET\" ? true : false } />\n            <label htmlFor=\"GET\">GET</label>\n\n\n            <input data-testid=\"methodInput\" type=\"radio\" value=\"POST\" name=\"method\" onChange={this.setMethod} checked={this.state.method === \"POST\" ? true : false} />\n\n            <label htmlFor=\"POST\">POST</label>\n\n            <input type=\"radio\" value=\"PUT\" name=\"method\" onChange={this.setMethod} checked={this.state.method === 'PUT' ? true : false} />\n            <label htmlFor=\"PUT\">PUT</label>\n\n            <input type=\"radio\" value=\"DELETE\" name=\"method\" onChange={this.setMethod} checked={this.state.method === 'DELETE' ? true : false}/>\n            <label htmlFor=\"DELETE\">DELETE</label>\n\n          </div>\n        </fieldset>\n\n        <button data-testid=\"submit\" onClick={this.sendInput}>Go</button>\n\n\n\n      </section>\n      <fieldset>\n        <legend>Body</legend>\n        <textarea onChange={this.setData} defaultValue={this.props.defaultData}></textarea>\n      </fieldset>\n    </>\n  );\n}\n\nexport default Form;","import React from 'react';\n\nexport default () => (\n    <footer className=\"App-footer\">\n      <p>&copy; Josh Williams 2020</p>\n    </footer>\n  )\n","import React from 'react';\nimport JSONPrettify from 'react-json-prettify';\nimport theme from 'react-json-prettify/dist/themes/xcode'\n\nimport loadingImage from '../img/three-blue-dots.gif';\n\nconst customTheme = {\n  ...theme,\n  overflow: 'scroll',\n}\n\nclass Results extends React.Component {\n\n  render = () => {\n    if (this.props.resultsIn === 'error') {\n      return <h1>Bad Request</h1>\n    \n    } else if (this.props.resultsIn !== null) {\n\n      return (\n        <>\n          <div id={this.props.resultsIn}>\n            <h2>Headers</h2>\n            <JSONPrettify json={this.props.data.headers} theme={customTheme} padding={6} />\n          </div>\n          <div id={this.props.resultsIn}>\n            <h2>Results</h2>\n            <JSONPrettify json={this.props.data.data} theme={customTheme} padding={6} />\n          </div>\n        </>\n      )\n\n    } else {\n      return this.props.loading ? (\n        <section id=\"logo\">\n          < img src={loadingImage} alt=\"loading\" />\n        </section>\n      ) : null;\n\n    }\n  }\n}\n\nexport default Results;","import React from 'react';\n\nexport default (props) => {\n\n  const makeRequest = (request) => {\n    props.talkToApi(request);\n  }\n\n  // return (\n  if (props.pastSearches) {\n    return (<aside>\n      <ul>\n        {\n          Object.keys(props.pastSearches).map(hash =>\n            <li key={hash}>\n              <span className={props.pastSearches[hash].method}>{props.pastSearches[hash].method} </span>\n              <button onClick={() => makeRequest(props.pastSearches[hash])}> {props.pastSearches[hash].url} </button>\n            </li>\n          )}\n      </ul>\n    </aside>\n  );\n} else { return null;}\n}","import React from 'react';\nimport axios from 'axios';\nimport md5 from 'md5';\n\nimport './style/base.scss';\nimport './style/header.scss';\nimport './style/form.scss';\nimport './style/results.scss';\nimport './style/footer.scss';\n\nimport Header from './components/header';\nimport Form from './components/form';\nimport Footer from './components/footer';\nimport Results from './components/results';\nimport History from './components/history';\n\nclass App extends React.Component { \n\n  constructor (props) {\n    super(props);\n    this.state = {\n      requestData:null,\n      resultsIn: null,\n      loading: false,\n      pastSearches: JSON.parse(localStorage.getItem('pastSearches')),\n      method:'GET',\n      // url:'http://',\n      // data:'',\n    };\n  }\n\n  // setUrl = (url) => {\n  //   console.log(url);\n  //   this.setState({url});\n  // }\n  // setMethod = (method) => this.setState({method});\n  // setData = (data) => this.setState({data});\n\n  talkToApi = async (requestObj) => {\n\n    this.toggleLoading()\n    this.setState({ url: requestObj.url, data: requestObj.data});\n    this.setState({ method: requestObj.method})\n\n    try {\n      let results = await axios(requestObj);\n      this.getResults(results);\n      this.saveToLocalStorage(requestObj)\n    } catch(e) {\n      console.log(e)\n      this.toggleLoading();\n      this.setState({resultsIn:'error', requestData:'Bad Request'});\n    }\n  }\n\n  toggleLoading = () => this.setState({loading: !this.state.loading});\n\n  getResults = (requestData) => {\n    this.toggleLoading();\n    this.setState({ requestData, resultsIn:'results' })\n  }\n\n  saveToLocalStorage = async (requestObj) => {\n    const hash = md5(JSON.stringify(requestObj))\n\n    await this.setState({pastSearches: { ...this.state.pastSearches, [hash]: requestObj }});\n\n    let stringifiedObj = JSON.stringify(this.state.pastSearches);\n\n    localStorage.setItem('pastSearches', stringifiedObj);\n  }\n\n  render = () => (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <Form handleInput={this.talkToApi} defaultUrl={this.state.url} defaultMethod={this.state.method} defaultData={this.state.data}  />\n        <History pastSearches={this.state.pastSearches} talkToApi={this.talkToApi}/>\n        <Results data={this.state.requestData} resultsIn={this.state.resultsIn} loading={this.state.loading} />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/three-blue-dots.5a721cb2.gif\";"],"sourceRoot":""}