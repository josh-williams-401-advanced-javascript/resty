{"version":3,"sources":["components/header.js","components/form.js","components/footer.js","components/results.js","App.js","serviceWorker.js","index.js"],"names":["className","Form","props","setMethod","e","setState","method","target","value","setUrl","url","sendInput","a","fetch","state","rawData","json","handleInput","render","data-testid","placeholder","onChange","type","name","htmlFor","onClick","React","Component","customTheme","theme","overflow","Results","resultsIn","id","data","padding","App","getResults","requestData","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wKAEe,G,8BAAA,WACb,OACE,4BAAQA,UAAU,cAChB,wC,uBC4CSC,E,kDA5Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,UAAY,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SAR/B,EASnBC,OAAS,SAAAL,GAAC,OAAI,EAAKC,SAAS,CAAEK,IAAKN,EAAEG,OAAOC,SATzB,EAWnBG,UAXmB,sBAWP,4BAAAC,EAAA,sEACUC,MAAM,EAAKC,MAAMJ,KAD3B,cACNK,EADM,YAEV,EAAKb,MAFK,SAEmBa,EAAQC,OAF3B,wBAECC,YAFD,2DAXO,EAgBnBC,OAAS,kBACP,oCACE,6BAASlB,UAAU,QACjB,kCACE,uCACA,2BAAOmB,cAAY,WAAWC,YAAY,UAAUC,SAAU,EAAKZ,UAErE,kCACE,0CACA,6BAEE,2BAAOa,KAAK,QAAQd,MAAM,MAAMe,KAAK,SAASF,SAAU,EAAKlB,YAC7D,2BAAOqB,QAAQ,OAAf,OACA,2BAAOL,cAAY,cAAcG,KAAK,QAAQd,MAAM,OAAOe,KAAK,SAASF,SAAU,EAAKlB,YACxF,2BAAOqB,QAAQ,QAAf,QACA,2BAAOF,KAAK,QAAQd,MAAM,MAAMe,KAAK,SAASF,SAAU,EAAKlB,YAC7D,2BAAOqB,QAAQ,OAAf,OACA,2BAAOF,KAAK,QAAQd,MAAM,SAASe,KAAK,SAASF,SAAU,EAAKlB,YAChE,2BAAOqB,QAAQ,UAAf,YAGJ,4BAAQL,cAAY,SAASM,QAAS,EAAKd,WAA3C,SAnCJ,EAAKG,MAAQ,CACXR,OAAQ,GACRI,IAAK,IAJU,E,UAFFgB,IAAMC,WCDV,oBACX,4BAAQ3B,UAAU,cAChB,wD,wCCAA4B,EAAW,2BACZC,KADY,IAEfC,SAAU,WAmBGC,E,4MAdbb,OAAS,WACP,OAA6B,OAAzB,EAAKhB,MAAM8B,UAEX,yBAAKC,GAAI,EAAK/B,MAAM8B,WAClB,uCACA,kBAAC,IAAD,CAAchB,KAAM,EAAKd,MAAMgC,KAAML,MAAOD,EAAaO,QAAS,KAI/D,M,YAXST,IAAMC,WC8BbS,E,kDAxBb,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IAORmC,WAAa,SAACC,GACZ,EAAKjC,SAAS,CAAEiC,cAAaN,UAAU,aATtB,EAYnBd,OAAS,kBACP,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,8BACE,kBAAC,EAAD,CAAMiB,YAAa,EAAKoB,aACxB,kBAAC,EAAD,CAASH,KAAM,EAAKpB,MAAMwB,YAAaN,UAAW,EAAKlB,MAAMkB,aAE/D,kBAAC,EAAD,QAjBF,EAAKlB,MAAQ,CACXwB,YAAY,KACZN,UAAW,MAJI,E,UAFHN,IAAMC,WCDJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS1B,OACP,kBAAC,IAAM2B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fc90085e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () => {\n  return (\n    <header className=\"App-header\">\n      <h1>RESTy</h1>\n    </header>\n  );\n}\n","import React from 'react';\n\n\nclass Form extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      method: '',\n      url: '',\n    }\n  }\n\n  setMethod = e => this.setState({ method: e.target.value })\n  setUrl = e => this.setState({ url: e.target.value });\n\n  sendInput = async () => {\n    let rawData = await fetch(this.state.url);\n    this.props.handleInput(await rawData.json());\n  };\n\n  render = () => (\n    <>\n      <section className=\"form\">\n        <fieldset>\n          <legend>URL</legend>\n          <input data-testid=\"urlInput\" placeholder=\"http://\" onChange={this.setUrl} />\n        </fieldset>\n        <fieldset>\n          <legend>Method</legend>\n          <div>\n\n            <input type=\"radio\" value=\"GET\" name=\"method\" onChange={this.setMethod} />\n            <label htmlFor=\"GET\">GET</label>\n            <input data-testid=\"methodInput\" type=\"radio\" value=\"POST\" name=\"method\" onChange={this.setMethod} />\n            <label htmlFor=\"POST\">POST</label>\n            <input type=\"radio\" value=\"PUT\" name=\"method\" onChange={this.setMethod} />\n            <label htmlFor=\"PUT\">PUT</label>\n            <input type=\"radio\" value=\"DELETE\" name=\"method\" onChange={this.setMethod} />\n            <label htmlFor=\"DELETE\">DELETE</label>\n          </div>\n        </fieldset>\n        <button data-testid=\"submit\" onClick={this.sendInput}>Go</button>\n      </section>\n\n    </>\n  );\n}\n\nexport default Form;","import React from 'react';\n\nexport default () => (\n    <footer className=\"App-footer\">\n      <p>&copy; Josh Williams 2020</p>\n    </footer>\n  )\n","import React from 'react';\nimport JSONPrettify from 'react-json-prettify';\nimport theme from 'react-json-prettify/dist/themes/xcode'\n\nconst customTheme = {\n  ...theme,\n  overflow: 'scroll',\n}\n\nclass Results extends React.Component {\n\n  render = () => {\n    if (this.props.resultsIn !== null) {\n      return (\n        <div id={this.props.resultsIn}>\n          <h2>Results</h2>\n          <JSONPrettify json={this.props.data} theme={customTheme} padding={6} />\n        </div>\n      )\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default Results;","import React from 'react';\n\nimport './style/base.scss';\nimport './style/header.scss';\nimport './style/form.scss';\nimport './style/results.scss';\nimport './style/footer.scss';\n\nimport Header from './components/header';\nimport Form from './components/form';\nimport Footer from './components/footer';\nimport Results from './components/results';\n\nclass App extends React.Component { \n\n  constructor(props) {\n    super(props);\n    this.state = {\n      requestData:null,\n      resultsIn: null,\n    };\n  }\n\n  getResults = (requestData) => {\n    this.setState({ requestData, resultsIn:'results' })\n  }\n\n  render = () => (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <Form handleInput={this.getResults}  />\n        <Results data={this.state.requestData} resultsIn={this.state.resultsIn}/>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}